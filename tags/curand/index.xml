<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cuRAND on Cayman</title>
    <link>https://example.com/tags/curand/</link>
    <description>Recent content in cuRAND on Cayman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jun 2019 14:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://example.com/tags/curand/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cuRAND快速生成大量随机数</title>
      <link>https://example.com/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Tue, 18 Jun 2019 14:26:00 +0800</pubDate>
      
      <guid>https://example.com/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>在一些算法中，快速生成大量伪随机数显得尤为重要。cuRAND 提供了在 host 端调用 device 端一次生成大量随机数储存在 device 端的 global 内存中和在 device 端调用一次产生单个随机数共 device 代码即时使用两种 API 。而后者使用不当可能会造成几个数量级的性能差距和效果差距，本文将主要对此进行分析。
在下面的代码中，我使用了不同的参数方式来生成了一些随机数，然后使用 nvprof 来对它们的性能做了比较, 并且把随机结果用OpenCV 可视化出来。
#include &amp;lt;curand_kernel.h&amp;gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt; #define COLS 400 #define ROWS 300 #define N (COLS*ROWS)  __global__ void random_test(curandState *states, float *data_f) { int x = blockIdx.x * blockDim.x + threadIdx.x; int y = blockIdx.y * blockDim.y + threadIdx.y; if(x &amp;gt;= COLS) return; if(y &amp;gt;= ROWS)return; const int tid = y * COLS + x; curandState state = states[tid]; //curand_init(clock64(), 0, 0, &amp;amp;state);  //curand_init(clock64(), pt.</description>
    </item>
    
  </channel>
</rss>