<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大香蕉</title>
    <link>https://zkyue.github.io/posts/</link>
    <description>Recent content in Posts on 大香蕉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Jun 2019 14:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://zkyue.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cuRAND快速生成大量随机数</title>
      <link>https://zkyue.github.io/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Tue, 18 Jun 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>在一些算法中，快速生成大量伪随机数显得尤为重要。cuRAND 提供了在 host 端调用 device 端一次生成大量随机数储存在 device 端的 global 内存中和在 device 端调用一次产生单个随机数共 device 代码即时使用两种 API 。而后者使用不当可能会造成几个</description>
    </item>
    
    <item>
      <title>使用 nvprof 来检测 CUDA 程序运行效率</title>
      <link>https://zkyue.github.io/posts/%E4%BD%BF%E7%94%A8nvprof%E6%9D%A5%E6%A3%80%E6%B5%8Bcuda%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/</link>
      <pubDate>Mon, 03 Jun 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/%E4%BD%BF%E7%94%A8nvprof%E6%9D%A5%E6%A3%80%E6%B5%8Bcuda%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/</guid>
      <description>nvprof 是 CUDA Toolkit 自带的 CUDA 程序运行效率分析工具。它可以生成 kernel 函数和 CUDA API 运行时间报表，肥肠好用！有了它你再也不用调系统的时间函数把代码搞得乱七八糟的了。下面请看示例。 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;curand_kernel.h&amp;gt; __global__ void hello() { printf(&amp;quot;Hello CUDA!\n&amp;quot;); } int main() { cudaFree(0); hello&amp;lt;&amp;lt;&amp;lt;1,10&amp;gt;&amp;gt;&amp;gt;(); cudaDeviceReset(); return 0; } 我们编</description>
    </item>
    
    <item>
      <title>双目立体视觉 with PatchMatch</title>
      <link>https://zkyue.github.io/posts/%E5%8F%8C%E7%9B%AE%E7%AB%8B%E4%BD%93%E8%A7%86%E8%A7%89patchmatch/</link>
      <pubDate>Sat, 18 May 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/%E5%8F%8C%E7%9B%AE%E7%AB%8B%E4%BD%93%E8%A7%86%E8%A7%89patchmatch/</guid>
      <description>Introduction 通过模仿人的两只眼睛如何估计深度，我们有了双目立体视觉系统。 一个双目立体视觉系统的结构如上图所示，$\rm O$ 和 $\rm O&amp;rsquo;$ 是两个相机的投影中心，$\rm B$ 是投影中心之间的距离，$f$ 是焦距，则物体 $\rm X$ 的深度</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zkyue.github.io/posts/sfm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zkyue.github.io/posts/sfm/</guid>
      <description>title: &amp;quot;SFM&amp;quot; date: 2019-07-07T14:26:00+08:00 draft: false tags: [&amp;quot;SFM&amp;quot;,&amp;quot;Bundle Ajustment&amp;quot;]  Structure‐from‐Motion 要解决的问题是从多张图片或者视频流中恢复物体的三维结构和相机位姿。可以通过构建相机模型然后对重投影误差进行优化来求解。
Formulation Input: $p{ij}=(v{ij},u_{ij})$ 第 $i$ 个对应点在第 $j$ 张图片的位置
Output：
 $X_i$, 对应点$p_i$ 的三维坐标 $R_j, t_j$, 第 $ j$ 个相机的旋转和平移  Cost： $$ g(X,R,T)=\sum{i=1}^m\sum{j=1}^m\begin{Vmatrix} P(X_i,R_j,tj)- \left[\begin{matrix} u{i,j} v_{i,j} \end{matrix}\right] \end{Vmatrix} ^2 \tag{1} $$
Bundle Adjustment 对上面的 Cost 函数进行优化叫做 Bundle Adjustment， 取自对通过一个点的一捆光线进行调整之意，一个很 intuitive 的名字。
Bundle Adjustment 一般采用 Levenberg‐Marquardt 进行优化，它是 Gauss‐Newton 的改进版。
Gauss‐Newton Gauss‐Newton 可以解决任意的非线性优化问题，工作过程如下：
 对待优化函数取一阶近似：  $$ f(P_i+\Delta)\approx f(P_i)+J\Delta $$
 最小化该一阶近似：  $$ \Delta=\mathop{\arg\min}\ \ | f(P_i)+J\Delta|^2 $$
 迭代升级直到收敛：  $$ P_{i+1}=P_i+\Delta $$
Apply Gauss‐Newton to BA 将（1）式改写为： $$ f(P)=g(X,R,T)=\sum{i,j}e{ij}^2(X,R,T) $$ 线性近似得： $$ f(P0)=\sum{ij}(e_{ij}(P0)+J{ij}\Delta)^2\approx c+2b^T\Delta+\Delta^TH\Delta \tag{2} $$ 其中： $$ b^T=\sum{ij}e^T{ij}J{ij}\ , H=\sum{ij}J{ij}^TJ{ij} $$ 最小化（2）式： $$ H\Delta=-b \tag{3} $$ 迭代： $$ P\leftarrow P+\Delta $$</description>
    </item>
    
  </channel>
</rss>