<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大香蕉</title>
    <link>https://zkyue.github.io/</link>
    <description>Recent content on 大香蕉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Jun 2019 14:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://zkyue.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cuRAND快速生成大量随机数</title>
      <link>https://zkyue.github.io/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</link>
      <pubDate>Tue, 18 Jun 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/curand%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid>
      <description>在一些算法中，快速生成大量伪随机数显得尤为重要。cuRAND 提供了在 host 端调用 device 端一次生成大量随机数储存在 device 端的 global 内存中和在 device 端调用一次产生单个随机数共 device 代码即时使用两种 API 。而后者使用不当可能会造成几个</description>
    </item>
    
    <item>
      <title>使用 nvprof 来检测 CUDA 程序运行效率</title>
      <link>https://zkyue.github.io/posts/%E4%BD%BF%E7%94%A8nvprof%E6%9D%A5%E6%A3%80%E6%B5%8Bcuda%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/</link>
      <pubDate>Mon, 03 Jun 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/%E4%BD%BF%E7%94%A8nvprof%E6%9D%A5%E6%A3%80%E6%B5%8Bcuda%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%95%88%E7%8E%87/</guid>
      <description>nvprof 是 CUDA Toolkit 自带的 CUDA 程序运行效率分析工具。它可以生成 kernel 函数和 CUDA API 运行时间报表，肥肠好用！有了它你再也不用调系统的时间函数把代码搞得乱七八糟的了。下面请看示例。 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;curand_kernel.h&amp;gt; __global__ void hello() { printf(&amp;quot;Hello CUDA!\n&amp;quot;); } int main() { cudaFree(0); hello&amp;lt;&amp;lt;&amp;lt;1,10&amp;gt;&amp;gt;&amp;gt;(); cudaDeviceReset(); return 0; } 我们编</description>
    </item>
    
    <item>
      <title>SLAM</title>
      <link>https://zkyue.github.io/posts/slam/</link>
      <pubDate>Sat, 18 May 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/slam/</guid>
      <description>SLAM(Simultaneous Localization and Mapping) 的主要目的是在机器人运动过程中对自身的位姿和周围的环境进行估计。 位姿 在三维空间中我们用坐标加旋转角度一共6个自由度来对位姿进行描述 旋转 旋转的表示： 旋转矩阵 旋转向量 欧拉角 四元数 对一个点进行旋转，</description>
    </item>
    
    <item>
      <title>双目立体视觉 with PatchMatch</title>
      <link>https://zkyue.github.io/posts/%E5%8F%8C%E7%9B%AE%E7%AB%8B%E4%BD%93%E8%A7%86%E8%A7%89patchmatch/</link>
      <pubDate>Sat, 18 May 2019 14:26:00 +0800</pubDate>
      
      <guid>https://zkyue.github.io/posts/%E5%8F%8C%E7%9B%AE%E7%AB%8B%E4%BD%93%E8%A7%86%E8%A7%89patchmatch/</guid>
      <description>Introduction 通过模仿人的两只眼睛如何估计深度，我们有了双目立体视觉系统。 一个双目立体视觉系统的结构如上图所示，$\rm O$ 和 $\rm O&amp;rsquo;$ 是两个相机的投影中心，$\rm B$ 是投影中心之间的距离，$f$ 是焦距，则物体 $\rm X$ 的深度</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://zkyue.github.io/about/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zkyue.github.io/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zkyue.github.io/posts/patchmatch-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zkyue.github.io/posts/patchmatch-resource/</guid>
      <description>PatchMatch Resource  PatchMatch Stereo - Stereo Matching with Slanted Support Windows
 GPU-based Parallelization of a Sub-pixel Highresolution Stereo Matching Algorithm for Highthroughput Biomass Sorghum Phenotyping
 《Accurate Image-Guided Stereo Matching With Efficient Matching Cost and Disparity Refinement》(2016)
 《PMSC:PatchMatch-Based Superpixel Cut for accurate Stereo Matching》(2018)
 《NIPM-sWMF: Towards Efficient FPGA Design for High-Definition Large-Disparity Stereo Matching》(2018)
 《Robust Adaptive Normalized cross-Correlation for Stereo Matching Cost computation》(2017)
 《Color Image-Guided Boundary-Inconsistent region refinement for Stereo Matching》
  # cuRAND快速生成大量随机数
【进度】
最近尝试了用各种方法对PatchMatch Stereo进行加速，总结如下：
在输入图片尺寸为427x370，匹配窗口为11x11，迭代次数为3的情况下，在 GTX 1660 Ti 上运行时间由原来的约 385ms 降为约 337ms，这个速度在其他使用 PatchMatch 方法的论文中提到的速度约快100～200ms。
思考：如何进一步加速？除了更强的 GPU 外，在处理视频流时，可利用前一帧的结果传播到下一帧来加速收敛，如果下一帧能在两次迭代收敛，那么 PatchMatch 的运行时间就变为原来的2/3. PatchMatch Stereo 总的来说是一个 PatchMatch 搜索框架加一个 cost 计算函数，原论文的 cost 是比较复杂的，但是效果较好，而 PatchMatch 是可以套用任意局部窗口立体匹配算法的代价函数的，如果要提升速度或者匹配质量都可以从 cost 函数入手。我参考了多份开源代码，关于 PatchMatch 搜索框架 ，似乎没有什么好的更好的解决方案。</description>
    </item>
    
  </channel>
</rss>